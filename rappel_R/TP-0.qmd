---
title: "TP 0 : Rappels de R"
author: "Zaineb Smida"
lang: fr
format:
  pdf:
    toc: true
    embed-resources: true
    self-contained-math: true
    self-contained: true
    code-fold: true
    code-summary: "Show the code"
    number-sections: true
    standalone: true
params:
  solution: true
execute: 
  cache: false
header-includes:
  - \usepackage{graphicx}
  - \usepackage{fancyhdr}
  - |
    % Ajuster la hauteur de l'en-tête
    \addtolength{\headheight}{2.5cm}

    % Appliquer le style fancy pour toutes les pages
    \pagestyle{fancy}

    % Configurer le texte et logo dans l'en-tête
    \fancyhead[L]{\textbf{5GEA - Analyse des données multidimensionnelles}}  % Texte à gauche
    \fancyhead[R]{\includegraphics[height=0.8cm]{logo_INSA.pdf}}  % Logo à droite

    % Ajouter une ligne horizontale sous l'en-tête
    \renewcommand{\headrulewidth}{0.4pt}  % Ligne horizontale sous l'en-tête

    % Appliquer le même en-tête pour la première page
    \fancypagestyle{plain}{
      \fancyhead[L]{\textbf{5GEA - Analyse des données multidimensionnelles}}  % Texte à gauche
      \fancyhead[R]{\includegraphics[height=0.8cm]{logo_INSA.pdf}}  % Logo à droite
      \renewcommand{\headrulewidth}{0.4pt}  % Ligne horizontale sous l'en-tête
    }

    % Ajouter la ligne horizontale et l'email dans le pied de page avec le numéro de page
    \fancyfoot[L]{\href{mailto:zaineb.smida@insa-lyon.fr}{zaineb.smida@insa-lyon.fr}}  % Adresse e-mail à gauche
    \fancyfoot[C]{}  % Désactiver le numéro de page centré
    \fancyfoot[R]{\thepage}  % Numéro de page à droite
    \renewcommand{\footrulewidth}{0.4pt}  % Ligne horizontale dans le pied de page
---







## Importation et manipulation de données

* Pour importer un fichier texte sous **R**, on utilise la fonction `read.table()`. Si la première ligne du fichier contient le nom des variables, on utilise l'option `header=T`. Par ailleurs, le paramètres `sep =` indique le caractère qui sépare les colonnes.

```{r}
regions <- read.table("data/regions.txt", header = TRUE)
```

L'objet créé est de type `data.frame` : les observations sont en lignes et les variables en colonnes. Un tel objet, contrairement à des matrices, peut contenir à la fois des variables quantitatives et qualitatives. 

La fonction `str()` peut s'appliquer sur tous les types d'objets. Quand on l'applique sur un `data.frame`, elle permet de reprérer les variables quantatives (`numeric`, `integer`) et les variables qualitatives (`character` et ou `factor`): 

```{r}
str(regions)
```


* On peut visualiser le tableau de données avec la fonction `View()` :

```{r, eval = F}
View(regions)
```

* On obtient la taille du jeu de données avec la fonction `dim()` :

```{r}
dim(regions)
```


* Affichage des premières lignes du fichier :

```{r}
head(regions, 5)
```

équivalent à : 

```{r}
regions[1:5, ]
```

* Affichage du nom des colonnes : 

```{r}
names(regions)
```

* Sélection d'une colonne : on peut utiliser l'opérateur `$` suivi du nom de la variable à extraire. Le résultat est un vecteur : 

```{r}
regions$POPUL
```


* Sélection d'une ou plusieurs colonnes, soit par les indices de colonnes (attention, l'indice commence à 1 et pas 0 comme d'autres langages): 

```{r, eval = F}
regions[, c(1, 2)]
regions[, c("NOM" , "REGION")]
```

* On sélectionne toutes les colonnes sauf les colonnes 1 et 2 

```{r, eval = F}
regions[, -c(1, 2)]
```


## Résumé statistique 

La plupart des fonctions de **R** s'appliquent sur des vecteurs. On utilisera des fonctions différentes selon qu'il s'agit d'une variable quantitative ou qualitative. 


### Résumé statistique des variables quantitatives

Par exemple, pour calculer la moyenne de la variable `NBBREV`, on fait :

```{r}
mean(regions$NBBREV)
```

Dans **R**, les valeurs manquantes sont codés des `NA`. Lorsqu'un vecteur contient des `NA`, le calcul de la moyenne ne sera pas possible sauf si on ajoute l'option `na.rm = T`. Cela est valable pour la plupart des fonctions ci-dessous : 

* le minimum et le maximum :

```{r}
max(regions$NBBREV)
min(regions$NBBREV)
```

* la médiane et le quantile d'ordre $\alpha$ :

```{r}
median(regions$NBBREV)
quantile(regions$NBBREV, 0.5)
```
* l'écart-type et la variance : 
```{r}
var(regions$NBBREV)
sd(regions$NBBREV)
```

Il est possible d'appliquer la même fonction sur plusieurs variables d'un jeu de données en utilisant la fonction `sapply()` de la façon suivante :

```{r}
sapply(regions[, 3:ncol(regions)], max)
```


###  Résumé des variables qualitatives 

Une variable qualitative est codée sous la forme d'un vecteur de `character` ou un `factor`. Par exemple, on créé une nouvelle variable qui vaut `"petit"` si la superficie est inférieure à 15000, `"moyenne"` si elle est comprise entre 15000 et 30000 et `"grande"` sinon  

```{r}
regions$quali <- "moyenne"
regions$quali[regions$SUPERF < 15000] <- "petite"
regions$quali[regions$SUPERF >= 30000] <- "grande"
```

Sur une variable qualitative, on calcule en général la table de contingence, en utilisant la fonction `table()` :

```{r}
tab <- table(regions$quali)
tab
```

On calcule les proportions avec la fonction `prop.table()` : 

```{r}
round(prop.table(tab), digits = 3)
```

On peut convertir la variable en `factor` si on est sûr du nombre de modalités possibles de la variable. 

```{r}
regions$quali <- factor(regions$quali, levels = c("petite", "moyenne", "grande"))
```


### Résumé globale

* La fonction `summary()` permet de calculer quelques résumés statistiques sur toutes les variables (quantitatives ou qualitatives) d'un jeu de données :

```{r}
summary(regions)
```

* La fonction `cor()` permet de calculer la matrice de corrélation sur plusieurs variables quantitatives :

```{r}
cor(regions[, 3:9])
```


## Quelques graphiques de base 

### Une variable quantitative 

On peut utiliser l'histogramme. Il existe de nombreuses options pour customiser le graphique. Ici, on n'en présente que quelques-unes : 

```{r}
par(mfrow = c(1, 2), # permet de représenter deux histogrammes dans 1 figure
  las = 1)         # l'échelle des ordonnées est écrit horizontalement
hist(regions$SUPERF, 
     col = "lightblue",   # couleur de l'histogramme
     main = "SUPERF",     # titre
     xlab = "Superficie (en Km2)",  # légende sur l'axe des abscisses
     ylab = "effectifs") # légende sur l'axe des oronnées
rug(regions$SUPERF, col = "red") # représente les observations sur l'axe x

hist(regions$POPUL, 
     col = "lightblue",   
     main = "POPUL",     
     xlab = "Population (en milliers)",ylab= "effectifs")
rug(regions$POPUL, col = "red")
```

Les boîtes à moustaches sont des alternatives et permettent plus facilement d'identifier les points atypiques : 

```{r, fig.height = 3}
par(mfrow = c(2, 3),  # Permet de représenter 6 boxplots dans 1 figure
    mar = c(3, 4, 0, 0), las = 1)  # Gère les marges et l'orientation des labels

# Création des boxplots avec des couleurs différentes pour chaque variable
boxplot(regions$TACT, ylab = "TACT", col = "lightblue")  
boxplot(regions$NBENTR, ylab = "NBENTR", col = "lightblue")   
boxplot(regions$NBBREV, ylab = "NBBREV", col = "lightblue")   
boxplot(regions$CHOM, ylab = "CHOM", col = "lightblue")   
boxplot(regions$SUPERF, ylab = "SUPERF", col = "lightblue")   
boxplot(regions$POPUL, ylab = "POPUL", col = "lightblue")
```

### Deux variables quantitatives 

Pour étudier le lien entre deux variables quantitatives, on utilise le nuage de points :

```{r, fig.width = 4, fig.height = 3}
plot(NBBREV ~ POPUL, # syntaxe de type formule y ~ x
     data = regions,
     pch = 16, # type de points
     cex = 0.8, # taille des points
     col = "grey", # couleur des points
     xlab = "Population (en milliers)",
     ylab = "Nombre de brevets"
     )
abline(lm(NBBREV ~ POPUL, data = regions), col = "red") # droite de régression linéaire
```

La fonction `pairs()` représente toutes les paires de nuage de points possible : 

```{r, fig.width = 6, fig.height = 6}
pairs(regions[, 3:9])
```


### Une variable qualitative 

Pour les variables qualitatives, on utilise en général un diagramme en barres, qu'on applique sur la table de contingence : 

```{r, fig.width = 4, fig.height = 4}
par(las = 1)
barplot(tab, main = "Superficie des régions",
        ylab = "effectifs", col = "lightblue")
```

Si on on veut observer le lien entre deux variables qualitatives, on utilise également la fonction `barplot()`.

## Autres fonctions utiles 

* `setwd()` : pour changer le répertoire de travail 
* `install.packages()` : installer des packages depuis le CRAN
* `library()` : charger une librairie au cours de la session 


Référence utile : https://cran.r-project.org/doc/contrib/Paradis-rdebuts_fr.pdf 


